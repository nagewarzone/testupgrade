const express = require('express');
const cors = require('cors');
const path = require('path');
const admin = require('firebase-admin');
// const { sendDiscord } = require('./routes/discordNotifier'); // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
const firebaseConfig = JSON.parse(process.env.FIREBASE_CONFIG);
firebaseConfig.private_key = firebaseConfig.private_key.replace(/\\n/g, '\n');

admin.initializeApp({
    credential: admin.credential.cert(firebaseConfig),
});
// sendDiscord('üì¢ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Discord ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!'); // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
const db = admin.firestore();
const app = express();
const port = 3000;

app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

const ADMIN_PASSWORD = '7890';
function adminAuth(req, res, next) {
    const adminPass = req.headers['x-admin-password'];
    if (!adminPass || adminPass !== ADMIN_PASSWORD) {
        return res.status(403).json({ success: false, message: 'Forbidden: Admin access required' });
    }
    next();
}

const ADMIN_CREDENTIALS = {
    username: 'admin',
    password: ADMIN_PASSWORD
};

app.post('/admin/login', (req, res) => {
    const { username, password } = req.body;
    if (!username || !password) {
        return res.status(400).json({ success: false, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å username ‡πÅ‡∏•‡∏∞ password' });
    }
    if (
        username === ADMIN_CREDENTIALS.username &&
        password === ADMIN_CREDENTIALS.password
    ) {
        return res.json({ success: true, message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', token: 'dummy-admin-token' });
    } else {
        return res.status(401).json({ success: false, message: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Admin' });
    }
});

app.post('/proxy', async (req, res) => {
    const { action, username, password, name, pointChange, topgmChange } = req.body;
    if (!action) return res.json({ success: false, message: 'Missing action' });

    try {
        const userRef = db.collection('users').doc(username);
        const userDoc = await userRef.get();

        if (action === 'register') {
            if (!username || !password) return res.json({ success: false, message: 'Missing username or password' });
            if (userDoc.exists) return res.json({ success: false, message: 'Username ‡∏ã‡πâ‡∏≥' });

            await userRef.set({
                password,
                token: 0,
                topgm: 0,
                warzone: 0,
                point: 0
            });
            return res.json({ success: true });
        }

        if (!userDoc.exists) return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
        const userData = userDoc.data();
        if (userData.password !== password) return res.json({ success: false, message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });

        if (action === 'login' || action === 'userinfo') {
            return res.json({ success: true, ...userData });
        }

        if (action === 'usepoint') {
            if (typeof pointChange !== 'number' || typeof topgmChange !== 'number') {
                return res.json({ success: false, message: 'Invalid pointChange or topgmChange' });
            }

            const displayName = name || username;
            const newPoint = (userData.point || 0) + pointChange;
            const newTopgm = (userData.topgm || 0) + topgmChange;

            if (newPoint < 0) return res.json({ success: false, message: 'POINT ‡πÑ‡∏°‡πà‡∏û‡∏≠' });
            if (newTopgm < 0) return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö topgm ‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ' });

            await userRef.update({ point: newPoint, topgm: newTopgm });

            // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å sendDiscord ‡∏≠‡∏≠‡∏Å
            return res.json({ success: true });
        }

        if (action === 'upgrade') {
            const itemName = 'topgm';
            let { token = 0, topgm = 0, warzone = 0 } = userData;

            if (token <= 0) return res.json({ success: false, message: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ PEMTO ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î' });
            if (topgm <= 0) return res.json({ success: false, message: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î' });

            const rateDoc = await db.collection('upgraderates').doc(itemName).get();
            if (!rateDoc.exists) return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î' });

            const { successRate, failRate, breakRate } = rateDoc.data();
            if (
                typeof successRate !== 'number' || typeof failRate !== 'number' || typeof breakRate !== 'number' ||
                successRate < 0 || failRate < 0 || breakRate < 0 || successRate + failRate + breakRate > 1
            ) return res.json({ success: false, message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });

            const roll = Math.random();
            let logResult, resultMessage;
            token -= 1;

            if (roll < successRate) {
                // ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                topgm -= 1;
                warzone += 1;
                logResult = '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
                resultMessage = '‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: Warzone';

                // ‡∏•‡∏ö sendDiscord ‡∏≠‡∏≠‡∏Å
            } else if (roll < successRate + failRate) {
                // ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
                logResult = '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß';
                resultMessage = '‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (TOPGM ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà)';

                // ‡∏•‡∏ö sendDiscord ‡∏≠‡∏≠‡∏Å
            } else {
                // ‡πÅ‡∏ï‡∏Å
                topgm -= 1;
                logResult = '‡πÅ‡∏ï‡∏Å';
                resultMessage = '‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢ (TOPGM ‡∏´‡∏≤‡∏¢)';

                // ‡∏•‡∏ö sendDiscord ‡∏≠‡∏≠‡∏Å
            }

            if (topgm < 0) topgm = 0;

            await userRef.update({ token, topgm, warzone });

            await db.collection('logs').add({
                Date: admin.firestore.FieldValue.serverTimestamp(),
                Username: username,
                Name: name || '',
                Item: itemName,
                Result: logResult
            });

            return res.json({ success: true, result: logResult, resultMessage });
        }

        return res.json({ success: false, message: 'Unknown action' });

    } catch (err) {
        console.error(err);
        return res.json({ success: false, message: 'Server Error' });
    }
});

// --------------------- Public & Admin APIs ---------------------

app.get('/getUpgradeRates', async (req, res) => {
    try {
        const snapshot = await db.collection('upgraderates').get();
        const rates = {};
        snapshot.forEach(doc => rates[doc.id] = doc.data());
        res.json({ success: true, rates });
    } catch (err) {
        console.error(err);
        res.json({ success: false, message: 'Server Error' });
    }
});

app.get('/getLogs', async (req, res) => {
    try {
        const snapshot = await db.collection('logs').orderBy('Date', 'desc').limit(100).get();
        const logs = [];
        snapshot.forEach(doc => logs.push({ id: doc.id, ...doc.data() }));
        res.json({ success: true, logs });
    } catch (err) {
        console.error(err);
        res.json({ success: false, message: 'Server Error' });
    }
});

app.get('/admin/getUsers', adminAuth, async (req, res) => {
  try {
    const search = (req.query.search || '').toLowerCase();

    let usersQuery = db.collection('users').orderBy('__name__').limit(100);

    const usersSnapshot = await usersQuery.get();
    const users = [];

    usersSnapshot.forEach(doc => {
      const username = doc.id.toLowerCase();
      if (!search || username.includes(search)) {
        users.push({ username: doc.id, ...doc.data() });
      }
    });

    res.json({ success: true, users });
  } catch (err) {
    console.error(err);
    res.json({ success: false, message: 'Server Error' });
  }
});
app.post('/admin/deleteLogs', adminAuth, async (req, res) => {
  try {
    const { logIds } = req.body;

    if (!Array.isArray(logIds) || logIds.length === 0) {
      return res.status(400).json({ success: false, message: '‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á logIds ‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á' });
    }

    const batch = db.batch();
    const logsCollection = db.collection('logs');

    logIds.forEach(id => {
      const docRef = logsCollection.doc(id);
      batch.delete(docRef);
    });

    await batch.commit();

    res.json({ success: true, message: `${logIds.length} logs ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢` });
  } catch (err) {
    console.error(err);
    res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö logs' });
  }
});


app.post('/admin/updateUpgradeRate', adminAuth, async (req, res) => {
    try {
        const { itemName, successRate, failRate, breakRate } = req.body;
        if (!itemName) return res.json({ success: false, message: 'Missing itemName' });

        if (
            typeof successRate !== 'number' || typeof failRate !== 'number' || typeof breakRate !== 'number' ||
            successRate < 0 || failRate < 0 || breakRate < 0 || successRate + failRate + breakRate > 1
        ) return res.json({ success: false, message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });

        await db.collection('upgraderates').doc(itemName).set({
            successRate,
            failRate,
            breakRate,
            updatedAt: admin.firestore.FieldValue.serverTimestamp()
        });

        res.json({ success: true });
    } catch (err) {
        console.error(err);
        res.json({ success: false, message: 'Server Error' });
    }
});

app.post('/admin/updateUser', adminAuth, async (req, res) => {
    try {
        const { username, fields } = req.body;
        if (!username || typeof fields !== 'object') {
            return res.json({ success: false, message: 'Invalid request body' });
        }

        const userRef = db.collection('users').doc(username);
        const userDoc = await userRef.get();
        if (!userDoc.exists) return res.json({ success: false, message: 'User not found' });

        await userRef.update(fields);
        res.json({ success: true });
    } catch (err) {
        console.error(err);
        res.json({ success: false, message: 'Server Error' });
    }
});

// Start server
app.listen(port, () => {
    console.log(`Server running on http://localhost:${port}`);
});
